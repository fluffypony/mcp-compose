version: '1'
servers:
  filesystem:
    image: node:18-slim
    runtime: docker
    command: bash
    args: ["-c", "npx -y @modelcontextprotocol/server-filesystem /tmp & NODE_PID=$! && trap 'kill $NODE_PID' SIGTERM SIGINT && tail -f /dev/null"]
    capabilities:
      - resources
      - tools
    resources:
      paths:
        - source: "/tmp"
          target: "/tmp"
          watch: true
    networks:
      - mcp-net

  memory:
    image: node:18-slim
    runtime: docker
    command: bash
    args: ["-c", "npx -y @modelcontextprotocol/server-memory & NODE_PID=$! && trap 'kill $NODE_PID' SIGTERM SIGINT && tail -f /dev/null"]
    capabilities:
      - tools
      - resources
    env:
      DEBUG: "mcp:*"
    networks:
      - mcp-net
    
  weather:
    image: node:18-slim
    runtime: docker
    command: bash
    args: ["-c", "cd /tmp && echo 'const readline=require(\"readline\");const rl=readline.createInterface({input:process.stdin,output:process.stdout,terminal:false});rl.on(\"line\",(line)=>{try{const req=JSON.parse(line);if(req.method===\"initialize\"){console.log(JSON.stringify({jsonrpc:\"2.0\",id:req.id,result:{protocolVersion:\"2024-01-01\",serverInfo:{name:\"weather\",version:\"1.0.0\"},capabilities:{tools:{}}}}));}else if(req.method===\"tools/get\"){const params=req.params || {};const location=params.location || \"Unknown\";console.log(JSON.stringify({jsonrpc:\"2.0\",id:req.id,result:{temperature:Math.floor(Math.random()*30)+10,conditions:[\"Sunny\",\"Cloudy\",\"Rainy\",\"Snowy\"][Math.floor(Math.random()*4)],location}}));}else{console.log(JSON.stringify({jsonrpc:\"2.0\",id:req.id,error:{code:-32601,message:\"Method not found\"}}));}}catch(e){console.log(JSON.stringify({jsonrpc:\"2.0\",id:null,error:{code:-32700,message:\"Parse error\"}}));}});console.error(\"Simple MCP Weather Server running\");' > server.js && node server.js & NODE_PID=$! && trap 'kill $NODE_PID' SIGTERM SIGINT && tail -f /dev/null"]
    capabilities:
      - tools
    networks:
      - mcp-net

connections:
  default:
    transport: stdio

networks:
  mcp-net:
    driver: bridge